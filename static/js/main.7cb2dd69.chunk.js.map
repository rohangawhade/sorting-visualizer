{"version":3,"sources":["SortingAlgorithms/sortingAlgorithm.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","colorOrig","this","resetArray","min","max","arrray","random","document","querySelectorAll","forEach","arr","style","backgroundColor","setState","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","className","Button","variant","onClick","mergeSort","quickSort","heapSort","bubbleSort","map","value","idx","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cb2dd69.chunk.js","sourcesContent":["export function getMergeSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length-1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\r\n    if(startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx+endIdx)/2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx+1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while(i<=middleIdx && j<=endIdx){\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]){\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else{\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while(i <= middleIdx){\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while(j <= endIdx){\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/sortingAlgorithm.js';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 25;\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            colorOrig: \"#233659\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const arrray = [];\r\n        for (let i = 0; i<NUMBER_OF_ARRAY_BARS; i++){\r\n            arrray.push(randomIntFromInterval(50, 600));\r\n        }\r\n        let arrayBars = document.querySelectorAll('.array-bar');\r\n        arrayBars.forEach(arr => arr.style.backgroundColor = \"#233659\");\r\n        this.setState({array:arrray});\r\n    }\r\n    mergeSort(){\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for(let i=0; i<animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i%3 !== 2;\r\n            if(isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i%3 === 0 ? '#3B49DF' : '#363D44';\r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }else{\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;        \r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    quickSort(){}\r\n\r\n    heapSort(){}\r\n\r\n    bubbleSort(){}\r\n\r\n    render(){\r\n        const {array, colorOrig} = this.state;\r\n        return(\r\n            <div className=\"array-container\">\r\n            <div className=\"Buttons\">\r\n                <Button variant=\"outline-dark\" onClick={() => this.resetArray()}>Generate new Array</Button>\r\n                <Button variant=\"outline-primary\" onClick={() => this.mergeSort()}>Merge Sort</Button>\r\n                <Button variant=\"outline-primary\" onClick={() => this.quickSort()}>Quick Sort</Button>\r\n                <Button variant=\"outline-primary\" onClick={() => this.heapSort()}>Heap Sort</Button>\r\n                <Button variant=\"outline-primary\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>\r\n            </div>\r\n                <div className=\"inner-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className='array-bar'\r\n                            key={idx}\r\n                            style={{height: `${value}px`, backgroundColor: `${colorOrig}`}}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}